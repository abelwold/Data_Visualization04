{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "daee483c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object `datetime` not found.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\abel\\AppData\\Local\\Temp/ipykernel_24864/2006337131.py:12: UserWarning: \n",
      "The dash_core_components package is deprecated. Please replace\n",
      "`import dash_core_components as dcc` with `from dash import dcc`\n",
      "  import dash_core_components as dcc\n",
      "C:\\Users\\abel\\AppData\\Local\\Temp/ipykernel_24864/2006337131.py:13: UserWarning: \n",
      "The dash_html_components package is deprecated. Please replace\n",
      "`import dash_html_components as html` with `from dash import html`\n",
      "  import dash_html_components as html\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import os\n",
    "import datetime?\n",
    "import datetime as dt\n",
    "import matplotlib.dates as mdates\n",
    "pd.options.display.max_columns = None\n",
    "import plotly.express as px\n",
    "from jupyter_dash import JupyterDash\n",
    "import dash_core_components as dcc\n",
    "import dash_html_components as html\n",
    "import dash_bootstrap_components as dbc\n",
    "from dash.dependencies import Input, Output\n",
    "from dash.exceptions import PreventUpdate\n",
    "import plotly\n",
    "import jupyter_dash as jd\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "sns.set()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d924951f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def problem4(file):\n",
    "\n",
    "#############################################################\n",
    "    \n",
    "    # Read data\n",
    "    data = pd.read_csv(file)\n",
    "\n",
    "#############################################################\n",
    "    \n",
    "    # Given\n",
    "    data.dateRep=pd.to_datetime(data.dateRep,format=\"%d/%m/%Y\")\n",
    "\n",
    "#############################################################\n",
    "    \n",
    "    # Given\n",
    "    confirmed_by_country = data.pivot(index=\"countriesAndTerritories\", columns=\"dateRep\", values=\"cases\")\n",
    "\n",
    "#############################################################\n",
    " \n",
    "    # Given\n",
    "    confirmed_7day_mean = confirmed_by_country.rolling(7,axis=1, min_periods=1).mean()\n",
    "\n",
    "#############################################################\n",
    "     \n",
    "    # New date format for the date values which are appearing in the dropdown \n",
    "    new_date_format = confirmed_by_country.columns.unique().strftime('%Y-%m-%d')\n",
    "\n",
    "#############################################################\n",
    "\n",
    "    # Importing all necessary libraries \n",
    "    from jupyter_dash import JupyterDash\n",
    "    import dash_html_components as html\n",
    "    import dash_core_components as dcc\n",
    "    import dash_bootstrap_components as dbc\n",
    "    from dash.dependencies import Output, Input\n",
    "\n",
    "#############################################################\n",
    "\n",
    "    # Initialize and build  dash app\n",
    "    app = JupyterDash(__name__)\n",
    "\n",
    "    app.layout = html.Div([\n",
    "        html.Div([\n",
    "            html.Div([\n",
    "                   html.Label(['Date']),\n",
    "        dcc.Dropdown(id='date',style={'height': '50px', 'width': '300px'}, options=[{'label': date, 'value': date}\n",
    "                                         for date in new_date_format]),\n",
    "                html.Div([\n",
    "                    html.Label(['Country']), \n",
    "        dcc.Dropdown(id='country',style={'height': '50px', 'width': '200px'}, options=[{'label': country, 'value': country}\n",
    "                                         for country in confirmed_by_country.index.unique()]),\n",
    "                ]),\n",
    "                html.Div([\n",
    "                    html.Label([\"Country\"],id='dis')\n",
    "                ])\n",
    "            ])\n",
    "        ])\n",
    "    ,\n",
    "        dcc.Graph(id='country_linechart', style={'width': '60%', 'display': 'inline-block'}),dcc.Graph(id='country_linchart', style={'width': '10%', 'display': 'inline-block'})\n",
    "    ])\n",
    "    \n",
    "####################################################################\n",
    "\n",
    "    # Define callback to update graph\n",
    "    @app.callback(Output('country_linechart', 'figure'), Input('country', 'value'),Input('date', 'value'))\n",
    "    \n",
    "# Displaying '7-Day averaged number of cases' plot\n",
    "\n",
    "    def display_country_averaged(country,date):\n",
    "        if not country:\n",
    "            raise PreventUpdate\n",
    "        filtered_df = confirmed_by_country[(confirmed_by_country.columns==country) |\n",
    "                                 (confirmed_by_country.index == country)]\n",
    "        loc_country = filtered_df.loc[country]\n",
    "        line_d = filtered_df.loc[country]\n",
    "        chart = px.line(line_d,\n",
    "                        title='7-Day averaged number of cases',height=500 ,\n",
    "                     width=500).update_layout(\n",
    "        xaxis_title=\"Date\",xaxis_range=['2020-01-01',date], yaxis_title=\"Number of Cases\",legend_title=\"Country\",\n",
    "        )\n",
    "        return chart\n",
    "    \n",
    "###########################################################################\n",
    "\n",
    "    # Define callback to update graph\n",
    "    @app.callback(Output('country_linchart', 'figure'), Input('country', 'value'),Input('date', 'value'))\n",
    "\n",
    "# Displaying 'Cumulative Number of cases' plot   \n",
    "\n",
    "    def plot_country_Cumulative(country, date):\n",
    "        if not country:\n",
    "            raise PreventUpdate\n",
    "        filtered_df_cum = confirmed_by_country[(confirmed_by_country.columns==country) |\n",
    "                                 (confirmed_by_country.index == country)]\n",
    "        line_d2 = filtered_df_cum.loc[country].cumsum()\n",
    "        fig = px.line(line_d2,\n",
    "                     title='Cumulative Number of cases',height=500 ,\n",
    "                     width=500).update_layout(\n",
    "        xaxis_title=\"Date\",xaxis_range=['2020-01-01',date], yaxis_title=\"Cumulative Number of Cases\",legend_title=\"Country\",\n",
    "        )\n",
    "        return fig\n",
    "\n",
    "##############################################################################    \n",
    "\n",
    "    # Define callback to update graph\n",
    "    @app.callback(Output('dis', 'children'),Input('country', 'value'),Input('date', 'value'))\n",
    "    \n",
    "# Getting 'death' and 'case' values of selected country and date    \n",
    "    def display_report(country,date):\n",
    "        if country is None:\n",
    "            return ''\n",
    "        get_case = data.query(\"countriesAndTerritories == @country & dateRep == @date \")['cases']\n",
    "        det_death = data.query(\"countriesAndTerritories == @country & dateRep == @date \")['deaths']\n",
    "        return [html.Div([\n",
    "           html.H3(\"Number of Cases\"),\n",
    "                f' The Confirmed number of cases of {country} is {get_case.values} .']),\n",
    "               html.Div([\n",
    "           html.H3(\"Number of Death\"),\n",
    "                f' {det_death.values} .'])]\n",
    "    \n",
    "#################################################################################     \n",
    "\n",
    "    # Run app and display result inline in the notebook\n",
    "    if __name__ == '__main__':\n",
    "        app.run_server(mode='inline',height=800, width='100%', port=1001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b43720aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"800\"\n",
       "            src=\"http://127.0.0.1:1001/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x1c2f266eee0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "problem4(\"covid19_ecdc_28_07_20.csv\") # For figures to appear, it takes little bit time (IN MY Laptop). Incase, give it time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7afd0a3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
